{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP53E631XU62o3J/myY47oK",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jinxing150/Standard-Data-For-Normal-Population-I-Luminosity-Class-V-Stars/blob/main/Graph\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "5H__XTpNYLcs"
      },
      "outputs": [],
      "source": [
        "import csv\n",
        "\n",
        "stars_header = ['name', 'U-B','B-V']\n",
        "stars_data = [\n",
        "    { 'name' : 'B0', 'U-B': -1.08, 'B-V':-0.30 }, \n",
        "    { 'name' : '1', 'U-B': -0.95, 'B-V':-0.265 },\n",
        "    { 'name' : '2', 'U-B': -0.84, 'B-V':-0.24 },\n",
        "    { 'name' : '3', 'U-B': -0.71, 'B-V':-0.205},\n",
        "    { 'name' : '5', 'U-B': -0.58, 'B-V':-0.17},\n",
        "    { 'name' : '6', 'U-B': -0.50, 'B-V':-0.15},\n",
        "    { 'name' : '7', 'U-B': -0.43, 'B-V':-0.135},\n",
        "    { 'name' : '8', 'U-B': -0.34, 'B-V':-0.11},\n",
        "    { 'name' : '9', 'U-B': -0.20, 'B-V':-0.075},\n",
        "    { 'name' : 'A0', 'U-B': -0.02, 'B-V':-0.02},\n",
        "    { 'name' : '11', 'U-B': 0.02, 'B-V':0.01},\n",
        "    { 'name' : '12', 'U-B': 0.05, 'B-V':0.05},\n",
        "    {'name' : '13', 'U-B': 0.08, 'B-V':0.08},\n",
        "    {'name' : '14', 'U-B': 0.10, 'B-V':0.15},\n",
        "    {'name' : '15', 'U-B': 0.10, 'B-V':0.20},\n",
        "    {'name' : '16', 'U-B': 0.09, 'B-V':0.25},\n",
        "    {'name' : 'F0', 'U-B': 0.03, 'B-V':0.30},\n",
        "    {'name' : '18', 'U-B': 0.00, 'B-V':0.35},\n",
        "    {'name' : '19', 'U-B': -0.02, 'B-V':0.44},\n",
        "    {'name' : '20', 'U-B': 0.02, 'B-V':0.52},\n",
        "    {'name' : 'G0', 'U-B': 0.06, 'B-V':0.58},\n",
        "    {'name' : '22', 'U-B': 0.12, 'B-V':0.63},\n",
        "    {'name' : '23', 'U-B': 0.20, 'B-V':0.68},\n",
        "    {'name' : '24', 'U-B': 0.30, 'B-V':0.74},\n",
        "    {'name' : 'K0', 'U-B': 0.45, 'B-V':0.81},\n",
        "    {'name' : '26', 'U-B': 0.54, 'B-V':0.86},\n",
        "    {'name' : '27', 'U-B': 0.64, 'B-V':0.91},\n",
        "    {'name' : '28', 'U-B': 0.80, 'B-V':0.96},\n",
        "    {'name' : '29', 'U-B': 1.08, 'B-V':1.15},\n",
        "    {'name' : '30', 'U-B': 1.21, 'B-V':1.33},\n",
        "]\n",
        "\n",
        "with open('stars.csv', 'w') as file:\n",
        "    writer = csv.DictWriter(file, fieldnames=stars_header)\n",
        "    writer.writeheader()\n",
        "    writer.writerows(stars_data)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import plotly.express as px"
      ],
      "metadata": {
        "id": "N5fCaOJ5YW6m"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "filename = 'stars.csv'\n",
        "df = pd.read_csv(filename)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 214
        },
        "id": "mlDObQeNYZ6F",
        "outputId": "c7bb731b-3268-4b06-c312-f075f77d567b"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  name   U-B    B-V\n",
              "0   B0 -1.08 -0.300\n",
              "1    1 -0.95 -0.265\n",
              "2    2 -0.84 -0.240\n",
              "3    3 -0.71 -0.205\n",
              "4    5 -0.58 -0.170"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-073f732f-0a58-4d2c-a365-3884b81d4869\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>U-B</th>\n",
              "      <th>B-V</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>B0</td>\n",
              "      <td>-1.08</td>\n",
              "      <td>-0.300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>-0.95</td>\n",
              "      <td>-0.265</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>-0.84</td>\n",
              "      <td>-0.240</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>-0.71</td>\n",
              "      <td>-0.205</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>-0.58</td>\n",
              "      <td>-0.170</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-073f732f-0a58-4d2c-a365-3884b81d4869')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-073f732f-0a58-4d2c-a365-3884b81d4869 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-073f732f-0a58-4d2c-a365-3884b81d4869');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t = df['B-V']\n",
        "v = df['U-B']"
      ],
      "metadata": {
        "id": "7QH2S7_yYkl3"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "t"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7ns04IVVYjTv",
        "outputId": "92094391-9090-4c92-eb2c-ce7206b61047"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    -0.300\n",
              "1    -0.265\n",
              "2    -0.240\n",
              "3    -0.205\n",
              "4    -0.170\n",
              "5    -0.150\n",
              "6    -0.135\n",
              "7    -0.110\n",
              "8    -0.075\n",
              "9    -0.020\n",
              "10    0.010\n",
              "11    0.050\n",
              "12    0.080\n",
              "13    0.150\n",
              "14    0.200\n",
              "15    0.250\n",
              "16    0.300\n",
              "17    0.350\n",
              "18    0.440\n",
              "19    0.520\n",
              "20    0.580\n",
              "21    0.630\n",
              "22    0.680\n",
              "23    0.740\n",
              "24    0.810\n",
              "25    0.860\n",
              "26    0.910\n",
              "27    0.960\n",
              "28    1.150\n",
              "29    1.330\n",
              "Name: B-V, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "v"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tVW1xDenYvS1",
        "outputId": "a2adcffd-963d-4cfe-d29a-47d7e5b57fe8"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    -1.08\n",
              "1    -0.95\n",
              "2    -0.84\n",
              "3    -0.71\n",
              "4    -0.58\n",
              "5    -0.50\n",
              "6    -0.43\n",
              "7    -0.34\n",
              "8    -0.20\n",
              "9    -0.02\n",
              "10    0.02\n",
              "11    0.05\n",
              "12    0.08\n",
              "13    0.10\n",
              "14    0.10\n",
              "15    0.09\n",
              "16    0.03\n",
              "17    0.00\n",
              "18   -0.02\n",
              "19    0.02\n",
              "20    0.06\n",
              "21    0.12\n",
              "22    0.20\n",
              "23    0.30\n",
              "24    0.45\n",
              "25    0.54\n",
              "26    0.64\n",
              "27    0.80\n",
              "28    1.08\n",
              "29    1.21\n",
              "Name: U-B, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, ax = plt.subplots(figsize=(10,7))\n",
        "ax.plot(t,v)\n",
        "ax.set_xlabel('B-V')\n",
        "ax.set_ylabel('U-B')\n",
        "ax.set_title('Standard Data For Normal Population I Luminosity Class V Stars')\n",
        "plt.gca().invert_yaxis()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "XnRLZ0U5YvwX",
        "outputId": "9cf3a464-bda2-4e58-fad9-c88c980471c4"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x504 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}